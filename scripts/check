#!/usr/bin/env python3

import sys
import json
import time
import fnmatch
from imapclient import IMAPClient
from email import policy
from email.parser import BytesParser
from email.header import decode_header

def check_new_mail(user, password, server, folder, check_return_unread_only, email_limit, subject_glob=None):
    with IMAPClient(host=server, use_uid=True, ssl=True) as client:
        client.login(user, password)
        client.select_folder(folder)

        # Search for unseen mails
        search_criterion = 'UNSEEN' if check_return_unread_only else 'ALL'
        messages = client.search(search_criterion)

        # Apply the limit on the number of emails
        messages = messages[-email_limit:]

        new_emails = []
        for msg_id in messages:
            data = client.fetch([msg_id], 'BODY[]')
            msg = data[msg_id][b'BODY[]']

            email_message = BytesParser(policy=policy.default).parsebytes(msg)
            date = email_message['Date'].datetime  # Use the datetime attribute
            timestamp = time.mktime(date.timetuple())

            # If a subject_glob is specified, only add the email if the subject matches
            if subject_glob:
                if email_message['Subject']:
                    decoded_header = decode_header(email_message['Subject'])
                    subject = ''.join([text.decode(encoding or 'utf8') if isinstance(text, bytes) else text for text, encoding in decoded_header])
                    if not fnmatch.fnmatch(subject, subject_glob):
                        continue

            new_emails.append({"id": str(msg_id), "timestamp": str(timestamp)})

        return new_emails


if __name__ == "__main__":
    # The check script is passed a JSON object via stdin
    input_json = json.load(sys.stdin)

    # Retrieve server connection info from the 'source' field in the JSON
    user = input_json["source"]["user"]
    password = input_json["source"]["password"]
    server = input_json["source"]["server"]
    folder = input_json["source"]["folder"]

    # Check if only unread emails should be returned, default to True
    check_return_unread_only = input_json["source"].get("check_return_unread_only", True)

    # Limit the number of emails returned, default to 5
    email_limit = input_json["source"].get("email_limit", 5)

    # Retrieve the subject_glob from the 'source' field in the JSON
    subject_glob = input_json["source"].get("subject_glob", None)

    # Retrieve the version from the 'version' field in the JSON
    previous_version = input_json.get("version", {"id": "0"})

    emails = check_new_mail(user, password, server, folder, check_return_unread_only, email_limit, subject_glob)

    new_emails = [email for email in emails if int(email["id"]) > int(previous_version.get("id", "0"))]

    print(json.dumps(new_emails))
