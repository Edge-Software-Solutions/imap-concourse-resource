#!/usr/bin/env python3

import os
import sys
import json
import time
from imapclient import IMAPClient
from email import policy
from email.parser import BytesParser
from email.message import Message

def fetch_mail(user, password, server, folder, msg_id):
    with IMAPClient(host=server, use_uid=True, ssl=True) as client:
        client.login(user, password)
        client.select_folder(folder)

        # Fetch the specific mail
        data = client.fetch([msg_id], 'BODY[]')
        msg = data[msg_id][b'BODY[]']

        email_message = BytesParser(policy=policy.default).parsebytes(msg)

        return email_message

def get_body(msg):
    if isinstance(msg, Message):
        if msg.is_multipart():
            return get_body(msg.get_payload(0))
        else:
            return msg.get_payload()
    else:
        return ""

def write_to_file(email_message, destination, email_body_only):
    with open(os.path.join(destination, "email.txt"), "w") as f:
        if email_body_only:
            f.write(get_body(email_message))
        else:
            f.write(str(email_message))

if __name__ == "__main__":
    # The destination directory is passed as the first argument
    destination = sys.argv[1]

    # The in script is passed a JSON object via stdin
    input_json = json.load(sys.stdin)

    # Retrieve server connection info from the 'source' field in the JSON
    user = input_json["source"]["user"]
    password = input_json["source"]["password"]
    server = input_json["source"]["server"]
    folder = input_json["source"]["folder"]

    # Retrieve the version from the 'version' field in the JSON
    msg_id = int(input_json["version"]["id"])

    # Check if email_body_only parameter exists, default to False if not
    email_body_only = input_json["source"].get("email_body_only", False)

    email_message = fetch_mail(user, password, server, folder, msg_id)

    write_to_file(email_message, destination, email_body_only)

    # Output the version
    print(json.dumps({"version": {"id": str(msg_id)}}))
